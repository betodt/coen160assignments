/**
 * 
 */
package myExpenseTracker;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import java.awt.*;
import java.util.*;

/**
 * @author Alberto Diaz
 *
 */

class BarCharts extends JPanel
{
	private DataManager dManager;
	private Map<Color, Expense> bars ;
	private boolean ok = false;

	public BarCharts(DataManager dm)
	{
		dManager = dm;
		setPreferredSize(new Dimension(500,500));
		bars = dManager.getData();
	}
	
	/**
	 * Add new bar to chart
	 * @param color color to display bar
	 * @param value size of bar
	 */
	
    public void displayGraph(){
    	ok = true;
    	repaint();
    }
    
    public void displayError(){
    	ok = false;
    	repaint();
    }
    private void drawTitlePage(Graphics2D g)
	{         
    	Font font = new Font("Comic Sans MS",Font.PLAIN,28);
    	
	     g.setPaint(Color.red);         
	     g.setFont(font);
	     g.drawString( "You exceeded your limit!", (g.getFontMetrics(font)).stringWidth("You exceeded your limit!"))/2, 300 );
	}
	private void drawBarGraph(Graphics2D g)
	{
		// determine longest bar

		int max = Integer.MIN_VALUE;
		for (Expense saleByQuarter : bars.values())
		{
			max = Math.max(max, saleByQuarter.getAmount());
		}
		// paint bars

		int width = (getWidth() / bars.size() - 10);
		
		int x = 1;
		for (Color color : bars.keySet())
		{
			Expense value = bars.get(color);
			int height = (int)((getHeight()-20) * ((double)value.getAmount() / max));
			System.out.println("max " + max + " height " + height + " width " + width + ", bar size " + bars.size());
            
			g.setColor(color);
			g.fillRect(x + 5, getHeight() - height, width, height);
			g.setColor(Color.black);
			Font font = new Font("Verdana",Font.PLAIN,20);
			g.setFont(font);
	        g.drawString( bars.get(color).amount + "", x + (width - (g.getFontMetrics(font)).stringWidth(bars.get(color).amount + ""))/2, getHeight() - height - 2);	
	        System.out.println(bars.size());
			g.drawRect(x + 5, getHeight() - height, width, height);
			x += (width + 2);
		}
	}
	@Override
	protected void paintComponent(Graphics gp)
	{ 
		super.paintComponent(gp);
         
         // Cast the graphics objects to Graphics2D
         
         Graphics2D g = (Graphics2D) gp;
		 g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
         g.setStroke(new BasicStroke(2.0f));
		
		 if (ok)
			drawBarGraph(g);
		 else
		 	drawTitlePage(g);
	}
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(bars.size() * 10 + 2, 50);
	}
}

public class App extends JFrame implements ActionListener, DocumentListener{
	DataManager dm = new DataManager();
	// buttons
	private JButton expenseBtn;
	// dropdown lists
	private JComboBox expenseList;
	// text fields
	private JTextField expenseField;
	private JTextField foodField;
	private JTextField shoppingField;
	private JTextField entertainField;
	private JTextField gasField;
	private JTextField[] form = new JTextField[4];
	// expense chart
	private BarCharts chart;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public App(){
		super("myExpenseTracker");
		//get content pane
		Container container = getContentPane();
		// set the layout
		GroupLayout layout = new GroupLayout(container);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
	    container.setLayout(layout);
	    
	    //create chart
	    chart = new BarCharts(dm);
		
		//create expense components
		String[] expenseTypes = { "Daily", "Monthly", "Yearly" };
		JLabel expenseLabel = new JLabel("Enter dollar limt and time period");
		expenseField = new JTextField(10);
		expenseList = new JComboBox(expenseTypes);
		expenseBtn = new JButton("Add");
		expenseBtn.setActionCommand("addExp");
		expenseBtn.addActionListener(this);
		
		//create category components
		JLabel categoryLabel = new JLabel("Enter amount spents for each category");
		JLabel foodLabel = new JLabel("Food: ");
		form[0] = foodField = new JTextField(20);
		foodField.setName("Food");
		foodField.getDocument().addDocumentListener(this);
		JLabel shoppingLabel = new JLabel("Shopping: ");
		form[1] = shoppingField = new JTextField(20);
		shoppingField.setName("Shopping");
		shoppingField.getDocument().addDocumentListener(this);
		JLabel entertainLabel = new JLabel("Entertainment: ");
		form[2] = entertainField = new JTextField(20);
		entertainField.setName("Entertainment");
		entertainField.getDocument().addDocumentListener(this);
		JLabel gasLabel = new JLabel("Gas: ");
		form[3] = gasField = new JTextField(20);
		gasField.setName("Gas");
		gasField.getDocument().addDocumentListener(this);
		
		layout.setHorizontalGroup(
				layout.createSequentialGroup()					
					.addGroup(layout.createParallelGroup()
						.addComponent(expenseLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(categoryLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(foodLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(shoppingLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(entertainLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(gasLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addGroup(layout.createParallelGroup()
							.addComponent(expenseField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(foodField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(shoppingField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(entertainField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(gasField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(chart, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
							
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							
					.addComponent(expenseList, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(expenseBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					
		);
		layout.setVerticalGroup(
				layout.createSequentialGroup()
				.addComponent(chart, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addGroup(layout.createParallelGroup()
						.addComponent(expenseLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(expenseField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(expenseList, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(expenseBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addComponent(categoryLabel)
					.addGroup(layout.createParallelGroup()
							.addComponent(foodLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(foodField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGroup(layout.createParallelGroup()
							.addComponent(shoppingLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(shoppingField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGroup(layout.createParallelGroup()
							.addComponent(entertainLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(entertainField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGroup(layout.createParallelGroup()
							.addComponent(gasLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(gasField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
		);
		
		//create 
		setSize(600,600);
		setLocationRelativeTo(null);
	    setVisible( true );
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		App application = new App();

	      application.setDefaultCloseOperation(
	         JFrame.EXIT_ON_CLOSE );
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getActionCommand().equals("addExp")) {
			System.out.println("You set a " + expenseList.getSelectedItem().toString().toLowerCase() + " limit of " + expenseField.getText() + " dollars.");
			dm.setLimit(Integer.parseInt(expenseField.getText()));
			if(dm.Update(form)) {
				chart.displayGraph();
			}
		}
	}

	@Override
	public void insertUpdate(DocumentEvent e) {
		// TODO Auto-generated method stub
		System.out.println("insert");
		if(dm.Update(form)) {
			chart.displayGraph();
		}
		else 
			chart.displayError();
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		// TODO Auto-generated method stub
		System.out.println("remove");
		dm.Update(form);
		chart.displayGraph();
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		// TODO Auto-generated method stub
		System.out.println("changed");
	}

}
